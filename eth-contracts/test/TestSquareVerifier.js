// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');
var util = require('util');

contract('SquareVerifier', accounts => {

    const empty_address = "0x0000000000000000000000000000000000000000";
    const account_one = accounts[0];
    const account_two = accounts[1];
    const account_three = accounts[2];
    const account_four = accounts[3];
    const account_five = accounts[4];
    const account_six = accounts[5];
    accounts.forEach((account, index) => console.log(`${index + 1}.) account[${index}] = ${account}`));
    beforeEach(async function () { 
        this.contract = await SquareVerifier.new({from: account_one});
    })

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('Test verification with correct proof', async function () {
	let args = {
            proof: {
		a: ["0x21bd5a850ba1a1efeb611edc091303b79987c6a2e57532b40a6288d1d43a74c4", "0x0fe9b005b1af14d83ae2a77510a1dfa43641d4d92e9f82b050165e9b52e76ae7"],
		b: [["0x139b032966799a55f12585b285e4af973a6f78263f8eb9c401c101a86edf3489", "0x13137b949100a59a4be3837b6b6c015afa81b233a1f44727a542cbb5b824fc55"], ["0x03a7e90ebbe9e7fb79f6903ab09ff46be491876678d3f880f6794b1d3da01131", "0x0e3443f19f1a5fbf767aa8e67fc29c4fe4f32ac4c7c9e099261d7a87873362fc"]],
		c: ["0x2a5910164d762e38e3d73eddfaebb208b29e9f0d43f64ff1d5f7598a4504abb2", "0x0899841cee8ca2c32c610100869bd5ccd2fd44c8ca383cf51a35255367bc4a29"]
            },
            inputs: ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000001"]
	};
	
        let isValid = await this.contract.verifySoln.call(args.proof.a, args.proof.b, args.proof.c, args.inputs);
	console.log(util.inspect(isValid));
	assert.equal(isValid, true, "Valid solution is not valid");
    })

    // Test verification with incorrect proof
    it('Test verification with incorrect proof', async function () {
		let args = {
            proof: {
		a: ["0x21bd5a850ba1a1efeb611edc091303b79987c6a2e57532b40a6288d1d43a74c4", "0x0fe9b005b1af14d83ae2a77510a1dfa43641d4d92e9f82b050165e9b52e76ae7"],
		b: [["0x139b032966799a55f12585b285e4af973a6f78263f8eb9c401c101a86edf3489", "0x13137b949100a59a4be3837b6b6c015afa81b233a1f44727a542cbb5b824fc55"], ["0x03a7e90ebbe9e7fb79f6903ab09ff46be491876678d3f880f6794b1d3da01131", "0x0e3443f19f1a5fbf767aa8e67fc29c4fe4f32ac4c7c9e099261d7a87873362fc"]],
		c: ["0x2a5910164d762e38e3d73eddfaebb208b29e9f0d43f64ff1d5f7598a4504abb2", "0x0899841cee8ca2c32c610100869bd5ccd2fd44c8ca383cf51a35255367bc4a29"]
            },
            inputs: ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000002"]
	};
	
        let isValid = await this.contract.verifySoln.call(args.proof.a, args.proof.b, args.proof.c, args.inputs);
	assert.equal(isValid, false, "Invalid solution should not be valid");
    })

})



